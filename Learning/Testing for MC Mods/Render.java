// This was generated by GPT-4.
// I am using this to learn how i would go about
// executing my idea.


import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Base64;

import javax.imageio.ImageIO;

import org.apache.commons.lang3.ArrayUtils;

import net.minecraft.block.BlockState;
import net.minecraft.block.ChestBlock;
import net.minecraft.block.entity.BlockEntity;
import net.minecraft.block.entity.ChestBlockEntity;
import net.minecraft.client.MinecraftClient;
import net.minecraft.client.gui.screen.Screen;
import net.minecraft.client.gui.screen.ingame.InventoryScreen;
import net.minecraft.client.render.BufferBuilder;
import net.minecraft.client.render.Camera;
import net.minecraft.client.render.Tessellator;
import net.minecraft.client.render.VertexFormats;
import net.minecraft.client.util.math.MatrixStack;
import net.minecraft.entity.player.PlayerEntity;
import net.minecraft.inventory.Inventory;
import net.minecraft.item.ItemStack;
import net.minecraft.server.MinecraftServer;
import net.minecraft.server.network.ServerPlayerEntity;
import net.minecraft.util.Identifier;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.Matrix4f;
import net.minecraft.util.math.Vec3d;
import net.minecraft.world.World;

import static spark.Spark.*;

public class ChestImageServer {
    private static final int IMAGE_WIDTH = 256;
    private static final int IMAGE_HEIGHT = 256;

    public static void main(String[] args) {
        // Set up the HTTP server
        port(8080);

        // Define the route for rendering chest images
        get("/chest/:x/:y/:z", (req, res) -> {
            // Parse the chest position from the URL
            int x = Integer.parseInt(req.params(":x"));
            int y = Integer.parseInt(req.params(":y"));
            int z = Integer.parseInt(req.params(":z"));

            // Get the chest block entity at the specified position
            MinecraftServer server = MinecraftClient.getInstance().getServer();
            World world = server.getWorld(World.OVERWORLD);
            BlockPos pos = new BlockPos(x, y, z);
            BlockEntity blockEntity = world.getBlockEntity(pos);
            if (!(blockEntity instanceof ChestBlockEntity)) {
                return "Invalid block entity at " + pos;
            }
            ChestBlockEntity chest = (ChestBlockEntity) blockEntity;

            // Render the chest inventory as an image
            BufferedImage image = renderInventory(chest.getInventory());

            // Convert the image to a base64-encoded string
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            try {
                ImageIO.write(image, "png", baos);
            } catch (IOException e) {
                e.printStackTrace();
            }
            byte[] bytes = baos.toByteArray();
            String base64 = Base64.getEncoder().encodeToString(bytes);

            // Return the image as a data URI
            return "data:image/png;base64," + base64;
        });
    }

    private static BufferedImage renderInventory(Inventory inventory) {
        // Set up the rendering environment
        MinecraftClient client = MinecraftClient.getInstance();
        PlayerEntity player = client.player;
        Screen screen = new InventoryScreen(player);
        MatrixStack matrixStack = new MatrixStack();
        matrixStack.translate(0.0, 0.0, 1000.0);
        Tessellator tessellator = Tessellator.getInstance();
        BufferBuilder bufferBuilder = tessellator.getBuffer();
        Camera camera = new Camera(matrixStack.peek().getModel(), matrixStack.peek().getNormal(), client.options.fov, (float) client.getWindow().getFramebufferWidth() / (float) client.getWindow().getFramebufferHeight(), 0.05f, 1000.0f);

        // Render the inventory items
        matrixStack.push();
        matrixStack.translate(IMAGE_WIDTH / 2.0, IMAGE_HEIGHT / 2.0, 0.0);
        matrixStack.scale(IMAGE_WIDTH / 176.0f, IMAGE_HEIGHT / 166.0f, 1.0f);
        matrixStack.translate(-88.0, -83.0, 0.0);
        for (int i = 0; i < inventory.size(); i++) {
            ItemStack stack = inventory.getStack(i);
            if (!stack.isEmpty()) {
                renderStack(stack, matrixStack, bufferBuilder, tessellator, camera);
            }
            matrixStack.translate(18.0, 0.0, 0.0);
            if ((i + 1) % 9 == 0) {
                matrixStack.translate(-162.0, 18.0, 0.0);
            }
        }
        matrixStack.pop();

        // Render the GUI to an image
        BufferedImage image = new BufferedImage(IMAGE_WIDTH, IMAGE_HEIGHT, BufferedImage.TYPE_INT_ARGB);
        Matrix4f matrix = matrixStack.peek().getModel();
        int[] pixels = new int[IMAGE_WIDTH * IMAGE_HEIGHT];
        bufferBuilder.end();
        BufferBuilderStorage storage = new